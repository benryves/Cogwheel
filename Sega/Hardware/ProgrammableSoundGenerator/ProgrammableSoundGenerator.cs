using System;
using System.Collections.Generic;
using BeeDevelopment.Brazil;
namespace BeeDevelopment.Sega8Bit.Hardware {

	/// <summary>
	/// Emulates an SN76489 programmable sound generator.
	/// </summary>
	[Serializable()]
	public partial class ProgrammableSoundGenerator {

		#region Types

		/// <summary>Represents various presets for the noise register.</summary>
		public enum NoisePresets {
			/// <summary>The noise generated by the Sega Master System and compatible hardware.</summary>
			SegaMasterSystem,
			/// <summary>The noise generated by the SC-3000.</summary>
			SC3000,
			/// <summary>The noise generated by the BBC Micro.</summary>
			BbcMicro
		}

		#endregion


		#region Properties

		/// <summary>
		/// Gets the <see cref="Emulator"/> that contains the <see cref="ProgrammableSoundGenerator"/>.
		/// </summary>
		[StateNotSaved()]
		public Emulator Emulator { get; private set; }

		private int clockSpeed;
		/// <summary>
		/// Gets or sets the clock speed of the sound generator.
		/// </summary>
		public int ClockSpeed {
			get { return this.clockSpeed; }
			set { this.clockSpeed = value; }
		}

		private int shiftRegisterWidth;
		/// <summary>
		/// Gets or sets the width of the linear feedback shift register.
		/// </summary>
		public int ShiftRegisterWidth {
			get { return this.shiftRegisterWidth; }
			set {
				if (value < 1 || value > 16) throw new InvalidOperationException("The shift register must be between 1 and 16 bits wide.");
				this.shiftRegisterWidth = value;
			}
		}

		private int tappedBits;
		/// <summary>Gets or sets the tapped bits for noise generation.</summary>
		public int TappedBits {
			get { return this.tappedBits; }
			set { this.tappedBits = value; }
		}

		#endregion

		#region Constructor

		/// <summary>
		/// Creates an instance of a <see cref="ProgrammableSoundGenerator"/>
		/// </summary>
		/// <param name="emulator">The emulator that contains the <see cref="ProgrammableSoundGenerator"/>.</param>
		public ProgrammableSoundGenerator(Emulator emulator) {
			this.Emulator = emulator;
			this.clockSpeed = this.Emulator.ClockSpeed / 16;
			this.ShiftRegisterWidth = 16;
			this.tappedBits = 0x9;
			this.Reset();
		}

		#endregion

		#region Methods

		/// <summary>
		/// Resets the <see cref="ProgrammableSoundGenerator"/> to its default state.
		/// </summary>
		public void Reset() {
			this.LatchedChannel = 0;
			this.LatchedMode = LatchMode.Tone;
			this.QueuedWrites = new Queue<QueuedWrite>(256);
			this.volumeRegisters = new byte[] { 0x0F, 0x0F, 0x0F, 0x0F };
			this.toneRegisters = new ushort[4];
			this.countDown = new int[4];
			this.levels = new int[] { 1, 1, 1, 1 };
			this.shiftRegister = (ushort)(1 << (this.ShiftRegisterWidth - 1));
			this.stereoDistribution = 0xFF;
		}

		/// <summary>
		/// Sets the noise mode by a preset.
		/// </summary>
		/// <param name="preset">The <see cref="NoisePresets"/> to use.</param>
		public void SetNoiseByPreset(NoisePresets preset) {
			switch (preset) {
				case NoisePresets.SegaMasterSystem:
					this.ShiftRegisterWidth = 16;
					this.tappedBits = 0x0009;
					break;
				case NoisePresets.SC3000:
					this.ShiftRegisterWidth = 16;
					this.tappedBits = 0x0006;
					break;
				case NoisePresets.BbcMicro:
					this.ShiftRegisterWidth = 15;
					this.tappedBits = 0x8005;
					break;
			}
		}

		#endregion

	}
}
